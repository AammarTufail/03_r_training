crop_name = "SampleCrop",
variety = "SampleVariety",
crop_group = "Cereals",
c3_c4 = "C3",
mono_di_cotyledon = "Monocotyledon",
inoculation_method = "Seed",
experiment_type = "Field",
salinity = 100,
comments = "No additional comments.",
# Results columns (optional)
ResponseVariable = "Sample Response",
Mean_Control_Uninoculated = 10,
SD_Control_Uninoculated = 1,
N_Control_Uninoculated = 5,
Mean_Treatment_Uninoculated = 12,
SD_Treatment_Uninoculated = 1.2,
N_Treatment_Uninoculated = 5,
Mean_Control_Inoculated = 15,
SD_Control_Inoculated = 1.5,
N_Control_Inoculated = 5,
Mean_Treatment_Inoculated = 18,
SD_Treatment_Inoculated = 1.8,
N_Treatment_Inoculated = 5,
stringsAsFactors = FALSE
)
# Sample data frame for the template
template <- data.frame(
paper_id = 1,
title = "Sample Paper Title",
abstract = "This is a sample abstract.",
doi = "10.1234/example.doi",
year = 2023,
submission_date = as.Date("2023-01-01"),
acceptance_date = as.Date("2023-02-01"),
publication_date = as.Date("2023-03-01"),
days_submission_publication = 60,
number_of_authors = 3,
first_author = "John Doe",
first_author_id = "https://orcid.org/0000-0001-2345-6789",
first_author_hindex = 15,
first_author_i10index = 20,
last_author = "Jane Smith",
last_author_id = "https://orcid.org/0000-0002-3456-7890",
last_author_hindex = 25,
last_author_i10index = 30,
corresponding_author = "Alice Johnson",
corresponding_author_id = "https://orcid.org/0000-0003-4567-8901",
corresponding_author_hindex = 35,
corresponding_author_i10index = 40,
corresponding_author_email = "alice@example.com",
group_lab_name = "Sample Lab",
institute_name = "Sample University",
institute_country = "Sample Country",
journal_name = "Sample Journal",
impact_factor = 5.5,
citation_score = 10,
publisher = "Sample Publisher",
cited_by = 50,
altmetric_score = 100,
country_of_research = "Sample Country",
continent = "Sample Continent",
keywords = "Keyword1; Keyword2; Keyword3",
access_type = "Open Access",
funding_source = "Sample Funding Agency",
data_availability = "Data available upon request.",
word_count = 5000,
number_of_references = 50,
sdg_mention = "Yes",
sdg_no = "1, 2, 3",
bacterial_genus = "SampleGenus",
bacterial_species = "SampleSpecies",
bacterial_strain = "SampleStrain",
gram_test = "Gram-positive",
crop_name = "SampleCrop",
variety = "SampleVariety",
crop_group = "Cereals",
c3_c4 = "C3",
mono_di_cotyledon = "Monocotyledon",
inoculation_method = "Seed",
experiment_type = "Field",
salinity = 100,
comments = "No additional comments.",
# Results columns (optional)
ResponseVariable = "Sample Response",
Mean_Control_Uninoculated = 10,
SD_Control_Uninoculated = 1,
N_Control_Uninoculated = 5,
Mean_Treatment_Uninoculated = 12,
SD_Treatment_Uninoculated = 1.2,
N_Treatment_Uninoculated = 5,
Mean_Control_Inoculated = 15,
SD_Control_Inoculated = 1.5,
N_Control_Inoculated = 5,
Mean_Treatment_Inoculated = 18,
SD_Treatment_Inoculated = 1.8,
N_Treatment_Inoculated = 5,
stringsAsFactors = FALSE
)
# Write the template to an Excel file
writexl::write_xlsx(template, "sample_template.xlsx")
runApp('shiny_app_data_Extraction.R')
runApp('shiny_app_data_Extraction.R')
runApp('shiny_app_data_Extraction.R')
runApp('shiny_app_data_Extraction.R')
library(shiny); runApp('shiny_app_data_Extraction.R')
runApp('shiny_app_data_Extraction.R')
runApp('shiny_app_data_Extraction.R')
runApp('shiny_app_data_Extraction.R')
library(shiny); runApp('shiny_app_data_Extraction.R')
runApp('shiny_app_data_Extraction.R')
runApp('shiny_app_data_Extraction.R')
runApp('shiny_app_data_Extraction.R')
runApp('shiny_app_data_Extraction.R')
runApp('perplexity_app.R')
runApp('perplexity_app.R')
runApp('perplexity_app.R')
runApp('shiny_app_data_Extraction.R')
runApp('shiny_app_data_Extraction.R')
runApp('shiny_app_data_Extraction.R')
runApp('shiny_app_data_Extraction.R')
runApp('shiny_app_data_Extraction.R')
runApp('shiny_app_data_Extraction.R')
runApp('shiny_app_data_Extraction.R')
runApp('shiny_app_data_Extraction.R')
runApp('shiny_app_data_Extraction.R')
runApp('shiny_app_data_Extraction.R')
runApp('shiny_app_data_Extraction.R')
runApp('shiny_app_data_Extraction.R')
runApp('shiny_app_data_Extraction.R')
runApp('shiny_app_data_Extraction.R')
runApp('shiny_app_data_Extraction.R')
install.packages("GWalkR")
install.packages("GWalkR")
install.packages("GWalkR")
library(GWalkR)
data()
data(BJsales) # import your data using readr or readxl
force(BJsales)
force(BJsales.lead)
data(ChickWeight) # import your data using readr or readxl
force(ChickWeight)
View(ChickWeight)
gwalkr(ChickWeight) # run the function
library(readr)
install.packages("readr")
library(readr)
## 1. Readr package
# install.packages("readr")
library(readr)
?readr
library(readr)
df <- read_csv("data/titanic.csv")
View(df)
library(readr)
df <- read_csv("data/titanic.csv")
View(df)
df <- read_csv("data/titanic.csv")
View(df)
View(df)
View(df)
## 2. readxl----
# install.packages("readxl") # comment in to installl the package
library(readxl)
df <- read_excel("data/titanic.xlsx", sheet = 1)
View(df)
View(df)
df1 <- read_excel("data/titanic.xlsx", sheet = 1)
View(df1)
df1 <- read_excel("data/BOD.xlsx", sheet = 1)
View(df1)
df <- read_excel("data/BOD.xlsx", sheet = 1)
df <- read_excel("data/BOD.xlsx", sheet = 2)
View(df)
df <- read_excel("data/BOD.xlsx", sheet = "bod")
df <- read_excel("data/BOD.xlsx", sheet = "iris")
df <- read_excel("data/BOD.xlsx", sheet = 1)
df <- read_excel("data/BOD.xlsx", sheet = 1)
View(df)
df <- read_excel("data/BOD.xlsx", sheet = "bod")
View(df)
## 3. writexl -----
# install.packages("writexl") # comment in to installl the package
library(writexl)
# save tsv file from df
write_csv(df, "data/BOD_test.tsv", delim = "\t")
# save tsv file from df
write_csv(df, "data/BOD_test.tsv")
write_csv(df, "data/BOD_test.csv")
write_tsv(df, "data/BOD_test.tsv")
## 3. writexl -----
# install.packages("writexl") # comment in to installl the package
write_xlsx(df, "data/BOD_test.xlsx")
## 4. Openxlsx ----
# install.packages("openxlsx") # comment in to installl the package
library(openxlsx)
remove.packages("openxlsx")
## 4. Openxlsx ----
# install.packages("openxlsx") # comment in to installl the package
library(openxlsx)
## 4. Openxlsx ----
# install.packages("openxlsx") # comment in to installl the package
library(openxlsx)
## 4. Openxlsx ----
install.packages("openxlsx", dependencies = TRUE)
## 4. Openxlsx ----
install.packages("openxlsx", dependencies = TRUE)
## 4. Openxlsx ----
# install.packages("openxlsx", dependencies = TRUE)
library(openxlsx)
?openxlsx
library(shiny); runApp('shiny_app_data_Extraction.R')
## 1. Packages needed for this ----
library(tidyverse)
library(readxl)
## 2. Load data ----
df <- read_excel("data/titanic.xlsx")
View(df)
View(data)
View(df)
## 3. Data Understanding ----
View(df)
tibble(df)
str(df)
summary(df)
summarise(df)
glimpses(df)
glimpse(df)
df %>% glimpse()
# summarise the df data
df %>% summarise_all(mean, na.rm = TRUE)
# summarise the df data
df %>% summarise_all(mean)
View(df)
# summarise the df data
df %>% summarise(avg = mean(age))
# summarise the df data
df %>% summarise(avg = mean(df$age))
# summarise the df data
df %>% summarise(avg = mean(df))
df %>%
group_by(Age) %>%
summarise(mean = mean(Age, na.rm = TRUE))
df %>%
group_by(age) %>%
summarise(mean = mean(age, na.rm = TRUE))
View(df)
# select only female from sex column in df
df %>%
filter(sex=="female")
# select only female from sex column in df
df_female <- df %>% filter(sex=="female")
View(df_female)
df_male <- df %>% filter(sex=="male")
View(df_male)
df %>%
filter(sex=="female") %>%
ggplot(aes(x = fare)) + geom_histogram(binwidth = 10, fill = "blue", color = "black") +
df %>%
filter(sex=="female") %>%
ggplot(aes(x = fare)) + geom_histogram(binwidth = 10, fill = "blue", color = "black")
df %>%
filter(sex=="female") %>%
ggplot(aes(x = fare)) + geom_histogram()
df %>%
filter(sex=="male") %>%
ggplot(aes(x = fare)) + geom_histogram()
df %>%
filter(sex=="male") %>%
filter(fare > 100) %>%
ggplot(aes(x = fare)) + geom_histogram()
df %>%
filter(sex=="male") %>%
filter(fare < 10) %>%
ggplot(aes(x = fare)) + geom_histogram()
df %>%
filter(sex=="male") %>%
# filter(fare < 10) %>%
filter(age < 10) %>%
ggplot(aes(x = fare)) + geom_histogram()
df %>%
filter(sex=="male") %>%
filter(fare < 10) %>%
filter(age < 10) %>%
ggplot(aes(x = fare, y = age)) + geom_point()
df %>%
filter(sex=="male") %>%
# filter(fare < 10) %>%
# filter(age < 10) %>%
ggplot(aes(x = fare, y = age)) + geom_point()
View(df)
df %>%
filter(sex=="male") %>%
# filter(fare < 10) %>%
# filter(age < 10) %>%
ggplot(aes(x = fare, y = age, colour = class)) + geom_point()
df %>%
filter(sex=="male") %>%
# filter(fare < 10) %>%
# filter(age < 10) %>%
ggplot(aes(y = fare, x = age, colour = class)) + geom_point()
# find number of missing values in each column of df
colSums(is.na(df))
# df %>% is.na() %>% barplot() # takes a lot of mem
df %>%  is.na() %>% colSums() %>% barplot
## 1. Packages ----
library(tidyverse)
## 1. Packages ----
library(tidyverse)
# install.packages("nycflights13")
library(nycflights13)
flights
df <- flights
# df %>% is.na() %>% barplot() # takes a lot of mem
df %>%  is.na() %>% colSums() %>% barplot()
# df %>% is.na() %>% barplot() # takes a lot of memory
df %>%  is.na() %>% colSums() %>% barplot() %>%
# save the plot
dev.copy(png, "output/figures/missing_values_plot.png")
# df %>% is.na() %>% barplot() # takes a lot of memory
df %>%  is.na() %>% colSums() %>% barplot()
df %>%  is.na() %>% colSums() %>%  write.csv("data/missing_values.csv")
## 1. library packages
library(tidyverse)
library(readxl)
## 2. Import dataset ----
df <- read_excel("data/titanic.xlsx")
View(df)
## 3. Fiund Missing Values ----
df %>% is.na() %>% colSums()
## 3. Find Missing Values ----
df %>% is.na() %>% colSums() %>% barplot()
%>% ggplot(aes(x = key, y = value)) + geom_bar(stat = "identity") + coord_flip() + theme_minimal() + labs(title = "Percentage of missing values in each column", x = "Column", y = "Percentage")
%>% gather() %>% ggplot(aes(x = key, y = value)) + geom_bar(stat = "identity") + coord_flip() + theme_minimal() + labs(title = "Percentage of missing values in each column", x = "Column", y = "Percentage")
## percentage of missing values in each column
df %>% summarise_all(~sum(is.na(.))/n())
## percentage of missing values in each column
df %>% summarise_all(~sum(is.na(.))/n()) %>% gather() %>% ggplot(aes(x = key, y = value)) + geom_bar(stat = "identity") + coord_flip() + theme_minimal() + labs(title = "Percentage of missing values in each column", x = "Column", y = "Percentage")
?summarise_all
## percentage of missing values in each column
df %>%
summarise_all(~sum(is.na(.))/n())
## percentage of missing values in each column
df %>%
summarise_all(~sum(is.na(.))/n())
## percentage of missing values in each column
df %>%
summarise_all(~sum(is.na(.))/n())
## percentage of missing values in each column
df %>%
summarise_all(~sum(is.na(.))/n()) %>%
write.csv("data/missing_values.csv")
## percentage of missing values in each column
df %>%
summarise_all(~sum(is.na(.))/n())
## percentage of missing values in each column
df %>%
summarise_all(~sum(is.na(.))/n()) %>%
gather() %>%
ggplot(aes(x = key, y = value)) + geom_col()
df %>%
drop_na() %>%
is.na() %>%
colSums() %>%
barplot()
df_clean_1 <- df %>% drop_na()
df_clean_2 <- df %>% select(-deck)
View(df_clean_2)
# remove rows with missing values in embarked
df_clean_3 <- df %>% drop_na(embarked)
# remove rows with missing values in embarked
df_clean_3 <- df_clean_2 %>% drop_na(embarked)
# removed deck column
#removed rows with missing values in embarked
df_clean_4 %>% df %>% drop_na(embarked) %>% select(-deck)
# removed deck column
#removed rows with missing values in embarked
df_clean_4 <- df %>% drop_na(embarked) %>% select(-deck)
View(df_clean_4)
# impute missing values of age and replace them with mean of age
df_clean_5 <- df_clean_4 %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age))
# let's check if we still have missing values
df_clean_5 %>% is.na() %>% colSums() %>% barplot()
# let's check if we still have missing values
df_clean_5 %>% is.na() %>% colSums() %>% barplot()
# let's check if we still have missing values
df_clean_5 %>% is.na() %>% colSums()
df_clean_final <- df %>%
select(-deck) %>%
drop_na(embarked) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age))
df_clean_final <- df %>%
select(-deck) %>%
mutate(embarked = ifelse(is.na(embarked), mode(embarked, na.rm = TRUE), embarked),
embarked_town = ifelse(is.na(embarked_town), mode(embarked_town, na.rm = TRUE), embarked_town)) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age))
df %>%
select(-deck) %>%
mutate(embarked = ifelse(is.na(embarked), mode(embarked, na.rm = TRUE), embarked),
embarked_town = ifelse(is.na(embarked_town), mode(embarked_town, na.rm = TRUE), embarked_town)) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age))
mode(df$embarked, na.rm = TRUE)
mode(df$embarked)
install.packages("DescTools")
library(DescTools)
Mode(df$embarked)
Mode(df$embarked, na.rm = TRUE)
## Impute and replace embarked and embarked_town with mode
df_clean_final <- df %>%
select(-deck) %>%
mutate(embarked = ifelse(is.na(embarked), Mode(embarked, na.rm = TRUE), embarked),
embarked_town = ifelse(is.na(embarked_town), Mode(embarked_town, na.rm = TRUE), embarked_town)) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age))
df %>%
select(-deck) %>%
mutate(embarked = ifelse(is.na(embarked), Mode(embarked, na.rm = TRUE), embarked),
embarked_town = ifelse(is.na(embarked_town), Mode(embarked_town, na.rm = TRUE), embarked_town)) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age))
Mode(df$embarked, na.rm = TRUE)
Mode(df$embarked_town, na.rm = TRUE)
df_clean_final <- df %>%
select(-deck) %>%
mutate(embarked = ifelse(is.na(embarked), "S", embarked),
embarked_town = ifelse(is.na(embarked_town), "Southampton", na.rm = TRUE), embarked_town)) %>%
## Impute and replace embarked and embarked_town with mode
df_clean_final <- df %>%
select(-deck) %>%
mutate(embarked = ifelse(is.na(embarked), "S", embarked),
embarked_town = ifelse(is.na(embarked_town), "Southampton", na.rm = TRUE), embarked_town) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age))
Mode(df$embarked_town)
Mode(df$embarked, na.rm = TRUE)
Mode(df$embarked_town, na.rm = TRUE)
install.packages("mice")
library(mice)
?mice
# impute missing values using mice
df_imputed <- mice(df, m = 5, maxit = 50, method = "pmm", seed = 500)
View(df_imputed)
mode(df$embarked)
mode(df$embarked, na.rm = TRUE)
Mode(df$embarked)
Mode(df$embarked, na.rm = TRUE)
Mode(df$embarked_town, na.rm = TRUE)
## Impute and replace embarked and embarked_town with mode
df_clean_final <- df %>%
select(-deck) %>%
mutate(embarked = ifelse(is.na(embarked) | embarked = "", "S", embarked),
## Impute and replace embarked and embarked_town with mode
df_clean_final <- df %>%
select(-deck) %>%
mutate(embarked = ifelse(is.na(embarked) | embarked = "", "S", embarked),
embarked_town = ifelse(is.na(embarked_town), Mode(embarked_town, na.rm = TRUE), embarked_town)
## Impute and replace embarked and embarked_town with mode
df_clean_final <- df %>%
select(-deck) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age),
embarked = ifelse(is.na(embarked), Mode(embarked, na.rm = TRUE), embarked),
embarked_town = ifelse(is.na(embarked_town), Mode(embarked_town, na.rm = TRUE), embarked_town))
## Impute and replace embarked and embarked_town with mode
df_clean_final <- df %>%
select(-deck) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age),
embarked = ifelse(is.na(embarked) | embarked = "", Mode(embarked, na.rm = TRUE), embarked),
## Impute and replace embarked and embarked_town with mode
df_clean_final <- df %>%
select(-deck) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age),
embarked = ifelse((is.na(embarked) | embarked = ""), Mode(embarked, na.rm = TRUE), embarked),
embarked_town = ifelse((is.na(embarked_town) | embarked_town = ""), Mode(embarked_town, na.rm = TRUE), embarked_town))
## Impute and replace embarked and embarked_town with mode
df_clean_final <- df %>%
select(-deck) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age),
embarked = ifelse((is.na(embarked) | embarked == ""), Mode(embarked, na.rm = TRUE), embarked),
embarked_town = ifelse((is.na(embarked_town) | embarked_town == ""), Mode(embarked_town, na.rm = TRUE), embarked_town))
Mode(df$embarked, na.rm = TRUE)
Mode(df$embarked_town, na.rm = TRUE)
class(df$embarked)
class(df$embarked_town)
View(df)
## Impute and replace embarked and embarked_town with mode
df_clean_final <- df %>%
select(-deck) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age),
embarked = ifelse((is.na(embarked) | embarked == ""), Mode(embarked, na.rm = TRUE), embarked),
embarked_town = ifelse((is.na(embark_town) | embark_town == ""), Mode(embarked_town, na.rm = TRUE), embarked_town))
## Impute and replace embarked and embarked_town with mode
df_clean_final <- df %>%
select(-deck) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age),
embarked = ifelse((is.na(embarked) | embarked == ""), Mode(embarked, na.rm = TRUE), embarked),
embarked_town = ifelse((is.na(embark_town) | embark_town == ""), Mode(embarked_town, na.rm = TRUE), embark_town))
## Impute and replace embarked and embarked_town with mode
df_clean_final <- df %>%
select(-deck) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age),
embarked = ifelse((is.na(embarked) | embarked == ""), Mode(embarked, na.rm = TRUE), embarked),
embarked_town = ifelse((is.na(embark_town) | embark_town == ""), Mode(embark_town, na.rm = TRUE), embark_town))
Mode(df$embark_town, na.rm = TRUE)
Mode(df$embarked, na.rm = TRUE)
View(df)
Mode(df$embarked, na.rm = TRUE)
Mode(df$embark_town, na.rm = TRUE)
Mode(df$embarked)
## Impute and replace embarked and embarked_town with mode
df_clean_final <- df %>%
select(-deck) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age),
embarked = ifelse((is.na(embarked) | embarked == ""), Mode(embarked, na.rm = TRUE), embarked),
embark_town = ifelse((is.na(embark_town) | embark_town == ""), Mode(embark_town, na.rm = TRUE), embark_town))
df_clean_final %>% is.na() %>% colSums()
