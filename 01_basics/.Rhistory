# remove rows with missing values in embarked
df_clean_3 <- df %>% drop_na(embarked)
# remove rows with missing values in embarked
df_clean_3 <- df_clean_2 %>% drop_na(embarked)
# removed deck column
#removed rows with missing values in embarked
df_clean_4 %>% df %>% drop_na(embarked) %>% select(-deck)
# removed deck column
#removed rows with missing values in embarked
df_clean_4 <- df %>% drop_na(embarked) %>% select(-deck)
View(df_clean_4)
# impute missing values of age and replace them with mean of age
df_clean_5 <- df_clean_4 %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age))
# let's check if we still have missing values
df_clean_5 %>% is.na() %>% colSums() %>% barplot()
# let's check if we still have missing values
df_clean_5 %>% is.na() %>% colSums() %>% barplot()
# let's check if we still have missing values
df_clean_5 %>% is.na() %>% colSums()
df_clean_final <- df %>%
select(-deck) %>%
drop_na(embarked) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age))
df_clean_final <- df %>%
select(-deck) %>%
mutate(embarked = ifelse(is.na(embarked), mode(embarked, na.rm = TRUE), embarked),
embarked_town = ifelse(is.na(embarked_town), mode(embarked_town, na.rm = TRUE), embarked_town)) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age))
df %>%
select(-deck) %>%
mutate(embarked = ifelse(is.na(embarked), mode(embarked, na.rm = TRUE), embarked),
embarked_town = ifelse(is.na(embarked_town), mode(embarked_town, na.rm = TRUE), embarked_town)) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age))
mode(df$embarked, na.rm = TRUE)
mode(df$embarked)
install.packages("DescTools")
library(DescTools)
Mode(df$embarked)
Mode(df$embarked, na.rm = TRUE)
## Impute and replace embarked and embarked_town with mode
df_clean_final <- df %>%
select(-deck) %>%
mutate(embarked = ifelse(is.na(embarked), Mode(embarked, na.rm = TRUE), embarked),
embarked_town = ifelse(is.na(embarked_town), Mode(embarked_town, na.rm = TRUE), embarked_town)) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age))
df %>%
select(-deck) %>%
mutate(embarked = ifelse(is.na(embarked), Mode(embarked, na.rm = TRUE), embarked),
embarked_town = ifelse(is.na(embarked_town), Mode(embarked_town, na.rm = TRUE), embarked_town)) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age))
Mode(df$embarked, na.rm = TRUE)
Mode(df$embarked_town, na.rm = TRUE)
df_clean_final <- df %>%
select(-deck) %>%
mutate(embarked = ifelse(is.na(embarked), "S", embarked),
embarked_town = ifelse(is.na(embarked_town), "Southampton", na.rm = TRUE), embarked_town)) %>%
## Impute and replace embarked and embarked_town with mode
df_clean_final <- df %>%
select(-deck) %>%
mutate(embarked = ifelse(is.na(embarked), "S", embarked),
embarked_town = ifelse(is.na(embarked_town), "Southampton", na.rm = TRUE), embarked_town) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age))
Mode(df$embarked_town)
Mode(df$embarked, na.rm = TRUE)
Mode(df$embarked_town, na.rm = TRUE)
install.packages("mice")
library(mice)
?mice
# impute missing values using mice
df_imputed <- mice(df, m = 5, maxit = 50, method = "pmm", seed = 500)
View(df_imputed)
mode(df$embarked)
mode(df$embarked, na.rm = TRUE)
Mode(df$embarked)
Mode(df$embarked, na.rm = TRUE)
Mode(df$embarked_town, na.rm = TRUE)
## Impute and replace embarked and embarked_town with mode
df_clean_final <- df %>%
select(-deck) %>%
mutate(embarked = ifelse(is.na(embarked) | embarked = "", "S", embarked),
## Impute and replace embarked and embarked_town with mode
df_clean_final <- df %>%
select(-deck) %>%
mutate(embarked = ifelse(is.na(embarked) | embarked = "", "S", embarked),
embarked_town = ifelse(is.na(embarked_town), Mode(embarked_town, na.rm = TRUE), embarked_town)
## Impute and replace embarked and embarked_town with mode
df_clean_final <- df %>%
select(-deck) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age),
embarked = ifelse(is.na(embarked), Mode(embarked, na.rm = TRUE), embarked),
embarked_town = ifelse(is.na(embarked_town), Mode(embarked_town, na.rm = TRUE), embarked_town))
## Impute and replace embarked and embarked_town with mode
df_clean_final <- df %>%
select(-deck) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age),
embarked = ifelse(is.na(embarked) | embarked = "", Mode(embarked, na.rm = TRUE), embarked),
## Impute and replace embarked and embarked_town with mode
df_clean_final <- df %>%
select(-deck) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age),
embarked = ifelse((is.na(embarked) | embarked = ""), Mode(embarked, na.rm = TRUE), embarked),
embarked_town = ifelse((is.na(embarked_town) | embarked_town = ""), Mode(embarked_town, na.rm = TRUE), embarked_town))
## Impute and replace embarked and embarked_town with mode
df_clean_final <- df %>%
select(-deck) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age),
embarked = ifelse((is.na(embarked) | embarked == ""), Mode(embarked, na.rm = TRUE), embarked),
embarked_town = ifelse((is.na(embarked_town) | embarked_town == ""), Mode(embarked_town, na.rm = TRUE), embarked_town))
Mode(df$embarked, na.rm = TRUE)
Mode(df$embarked_town, na.rm = TRUE)
class(df$embarked)
class(df$embarked_town)
View(df)
## Impute and replace embarked and embarked_town with mode
df_clean_final <- df %>%
select(-deck) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age),
embarked = ifelse((is.na(embarked) | embarked == ""), Mode(embarked, na.rm = TRUE), embarked),
embarked_town = ifelse((is.na(embark_town) | embark_town == ""), Mode(embarked_town, na.rm = TRUE), embarked_town))
## Impute and replace embarked and embarked_town with mode
df_clean_final <- df %>%
select(-deck) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age),
embarked = ifelse((is.na(embarked) | embarked == ""), Mode(embarked, na.rm = TRUE), embarked),
embarked_town = ifelse((is.na(embark_town) | embark_town == ""), Mode(embarked_town, na.rm = TRUE), embark_town))
## Impute and replace embarked and embarked_town with mode
df_clean_final <- df %>%
select(-deck) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age),
embarked = ifelse((is.na(embarked) | embarked == ""), Mode(embarked, na.rm = TRUE), embarked),
embarked_town = ifelse((is.na(embark_town) | embark_town == ""), Mode(embark_town, na.rm = TRUE), embark_town))
Mode(df$embark_town, na.rm = TRUE)
Mode(df$embarked, na.rm = TRUE)
View(df)
Mode(df$embarked, na.rm = TRUE)
Mode(df$embark_town, na.rm = TRUE)
Mode(df$embarked)
## Impute and replace embarked and embarked_town with mode
df_clean_final <- df %>%
select(-deck) %>%
mutate(age = ifelse(is.na(age), mean(age, na.rm = TRUE), age),
embarked = ifelse((is.na(embarked) | embarked == ""), Mode(embarked, na.rm = TRUE), embarked),
embark_town = ifelse((is.na(embark_town) | embark_town == ""), Mode(embark_town, na.rm = TRUE), embark_town))
df_clean_final %>% is.na() %>% colSums()
# library packages -----
library(tidyverse)
df <- read_excel("data/titanic.xlsx")
library(readxl)
df <- read_excel("data/titanic.xlsx")
View(df)
# draw a histogram
hist(df$age)
# draw a histogram
hist(df$age, bins=20)
# draw a histogram
hist(df$age, bin=20)
# draw a histogram with ggplot2 having 10 bins
ggplot(df, aes(x = age)) + geom_histogram(bins = 10)
# draw a histogram with ggplot2 having 10 bins
ggplot(df, aes(x = age)) + geom_histogram(bins = 10) +
theme_bw()
# draw a histogram with ggplot2 having 10 bins
ggplot(df, aes(x = age)) + geom_histogram(bins = 10) +
theme_classic()
# draw a histogram with ggplot2 having 10 bins
ggplot(df, aes(x = age)) + geom_histogram(bins = 20) +
theme_classic()
mean(df$age, na.rm = TRUE)
median(df$age, na.rm = TRUE)
mean(A)
A <- c(2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 21, 34)
B <- c(2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 21, 34, 100)
mean(A)
median(A)
mean(B)
median(B)
A <- c(2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 21, 34)
mean(A)
A <- c(2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 21, 34,100)
mean(A)
A <- c(2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 21, 34,100,500)
mean(A)
A <- c(2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 21, 34)
A <- c(2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 21, 34)
median(A)
A <- c(2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 21, 34,100)
median(A)
A <- c(2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 21, 34,100,500)
median(A)
## Data Distributions ------
# Normal Distribution
x <- seq(-4, 4, length = 100)
hist(x)
y <- dnorm(x, mean = 0, sd = 1)
hist(y)
y <- dnorm(x, mean = 0, sd = 1)
hist(y)
## Data Distributions ------
# Normal Distribution
hist(df$age)
shapiro.test(df$age)
hist(df$fare)
shapiro.test(df$fare)
ggplot(df, aes(x = age)) + geom_histogram(bins = 50)
ggplot(df, aes(x = fare)) + geom_histogram(bins = 50)
x <- df$age
if (shapiro.test(x)$p.value > 0.05) {
print("Data is normally distributed")
} else {
print("Data is not normally distributed")
}
# density plot of age
ggplot(df, aes(x = age)) + geom_density()
# density plot of age
ggplot(df, aes(x = age)) + geom_density() + theme_classic()
# density plot of age
ggplot(df, aes(x = fare)) + geom_density() + theme_classic()
# Why can't we do the same with categorical data
ggplot(df, aes(x = sex)) + geom_density() + theme_classic()
# Why can't we do the same with categorical data
ggplot(df, aes(x = pclass)) + geom_density() + theme_classic()
# Why can't we do the same with categorical data
ggplot(df, aes(x = class)) + geom_density() + theme_classic()
# Why can't we do the same with categorical data
ggplot(df, aes(x = class)) + geom_histogram() + theme_classic()
hist(df$class)
plot(df$class)
boxplot(df$age)
boxplot(df$age~df$class)
# count plot of class using ggplot2
ggplot(df, aes(x = class)) + geom_bar() + theme_classic()
# count plot of class using ggplot2
ggplot(df, aes(x = class)) + geom_bar()
ggplot(df, aes(x = class, y = age)) + geom_bar()
ggplot(df, aes(x = class, y = age)) + geom_bar(stat = "identity")
?geom_bar
ggplot(df, aes(x = class, y = age)) + geom_bar(stat = "count")
ggplot(df, aes(x = class, y = age)) + geom_bar(stat = "identity")
# calculate mean and SD of age and then make a plot with sex
df %>%
group_by(sex) %>%
summarise(mean_age = mean(age, na.rm = TRUE), sd_age = sd(age, na.rm = TRUE))
df %>%
filter(sex == "male") %>%
ggplot(aes(x = age)) + geom_histogram(bins = 50) + theme_classic()
df %>%
filter(sex == "female") %>%
ggplot(aes(x = age)) + geom_histogram(bins = 50) + theme_classic()
# calculate mean and SD of age and then make a plot with sex
df %>%
group_by(sex) %>%
summarise(mean_age = mean(age, na.rm = TRUE), sd_age = sd(age, na.rm = TRUE))
df %>%
group_by(sex) %>%
summarise(mean_age = mean(age, na.rm = TRUE), sd_age = sd(age, na.rm = TRUE)) %>%
ggplot(mean_age, sex) + geom_bar(stat = "identity") + theme_classic()
df %>%
group_by(sex) %>%
summarise(mean_age = mean(age, na.rm = TRUE), sd_age = sd(age, na.rm = TRUE)) %>%
ggplot(sex) + geom_bar(stat = "identity") + theme_classic()
df %>%
group_by(sex) %>%
summarise(mean_age = mean(age, na.rm = TRUE), sd_age = sd(age, na.rm = TRUE)) %>%
ggplot(sex) + geom_bar()
df %>%
group_by(sex) %>%
summarise(mean_age = mean(age, na.rm = TRUE), sd_age = sd(age, na.rm = TRUE)) %>%
ggplot(age) + geom_bar()
df %>%
group_by(sex) %>%
summarise(mean_age = mean(age, na.rm = TRUE), sd_age = sd(age, na.rm = TRUE)) %>%
ggplot(x = mean_age, y = sd_age) + geom_point() + theme_classic()
means <-  df %>%
group_by(sex) %>%
summarise(mean_age = mean(age, na.rm = TRUE), sd_age = sd(age, na.rm = TRUE))
View(means)
ggplot(means, aes(x = sex, y = mean_age)) + geom_bar(stat = "identity") + theme_classic()
kurtosis(df$age, na.rm = TRUE)
skewness(df$age, na.rm = TRUE)
# find kurtosis of age
install.packages("moments")
library(moments)
kurtosis(df$age, na.rm = TRUE)
skewness(df$age, na.rm = TRUE)
library(moments)
kurtosis(df$age, na.rm = TRUE)
skewness(df$age, na.rm = TRUE)
View(means)
#fare
kurtosis(df$fare, na.rm = TRUE)
skewness(df$fare, na.rm = TRUE)
# library packages -----
library(readxl)
library(readxl)
df <- read_excel("data/titanic.xlsx")
# 1
View(df)
#2
str(df)
#3
summary(df) # to see the summary of the dataframe
#4
dim(df) # to see the dimensions of the dataframe
#5
head(df) # to see the first 6 rows of the dataframe
#6
tail(df) # to see the last 6 rows of the dataframe
View(df)
#7
nrow(df) # to see the number of rows in the dataframe
#8
ncol(df) # to see the number of columns in the dataframe
#9
colnames(df) # to see the column names of the dataframe
row.names(df) # to see the row names of the dataframe
sapply(df, class) # to see the class of each column in the dataframe
class(df) # to see the class of the dataframe
class(df$pclass) # to see the class of the dataframe
class(df$sex)
#11
levels(df$sex)
#11
levels(df$pclass)
#11
levels(df$class)
View(df)
# make pclass as factor
df$pclass <- as.factor(df$pclass)
#11
levels(df$pclass)
sapply(df, class) # to see the class of each column in the dataframe
#12
is.na(df) # to see the missing values in the dataframe
sum(is.na(df)) # to see the total missing values in the dataframe)
sum(is.na(df$age)) # to see the total missing values in the age column
#13
colsum(is.na(df)) # to see the missing values in each column of the dataframe
#13
colSums(is.na(df)) # to see the missing values in each column of the dataframe
#14
duplicated(df) # to see the duplicated rows in the dataframe
sum(duplicated(df)) # to see the total duplicated rows in the dataframe
#16
subset(df, pclass == 1) # to subset the dataframe based on the condition
#16
df_first_class <- subset(df, pclass == 1) # to subset the dataframe based on the condition
View(df_first_class)
#16
df_first_class <- subset(df, class == "first") # to subset the dataframe based on the condition
View(df_first_class)
View(df)
#16
df_first_class <- subset(df, class == "irst") # to subset the dataframe based on the condition
View(df_first_class)
#16
df_first_class <- subset(df, class == "First") # to subset the dataframe based on the condition
#17
sort(df$age) # to sort the age column in the dataframe
sort(df$pclass)
min(df$age) # to see the minimum value in the age column
min(df$age, na.rm = True) # to see the minimum value in the age column
min(df$age, na.rm = TRUE) # to see the minimum value in the age column
max(df$age, na.rm = TRUE) # to see the maximum value in the age column
#18
df[order(df$age), ] # to sort the dataframe based on the age column
View(df)
#18
df[order(df$pclass),] # to sort the dataframe based on the age column
df[order(df$pclass), ]
df_ordered_pclass <- df[order(df$pclass), ]
View(df_ordered_pclass)
#19
mean(df$age, na.rm = TRUE) # to see the mean of the age column
#19
mean(df$age) # to see the mean of the age column
#20
meadian(df$age, na.rm = TRUE) # to see the median of the age column
#20
median(df$age, na.rm = TRUE) # to see the median of the age column
#21
sd(df$age, na.rm = TRUE) # to see the standard deviation of the age column
se <- sd(df$age, na.rm = TRUE)/sqrt(nrow(df)) # to see the standard error of the age column
#22
quantile(df$age, na.rm = TRUE) # to see the quantiles of the age column
# inter quartile range
IQR(df$age, na.rm = TRUE)
#23
range(df$age, na.rm = TRUE) # to see the range of the age column
#24
table(df$pclass) # to see the frequency of each class in the pclass column
### Categorical Variables frequencies
#24
table(df$class) # to see the frequency of each class in the pclass column
table(df$sex) # to see the frequency
table(df$who)
#25
length(df) # to see the length of the dataframe
length(df$sex)
length(unique(df$sex)) # to see the number of unique values in sex
length(unique(df$class)) # to see the number of unique values in
length(unique(df$age))
length(unique(df$embarked))
table(df$embarked) # to see the frequency
#27
prop.table(table(df$class)) # to see the proportion of each class in the class column
# find percentage of each class
prop.table(table(df$class))*100
#28
cor(df$age, df$fare) # to see the correlation between age and fare
#28
cor(df$age, df$fare, na.rm = TRUE) # to see the correlation between age and fare
#28
cor(df$age, df$fare, use = "complete.obs") # to see the correlation between age and fare
#29
hist(df$age) # to see the histogram of the age column
#30
boxplot(df$age) # to see the boxplot of the age column
plot(df)
cor(df$age, df$fare, use = "pairwise.complete.obs") # to see the correlation between age and fare
####----- Plotly for interactive plots -----####
install.packages("plotly")
library(plotly)
library(tidyverse)
# Load the data
data("diamonds")
force(diamonds)
library(readxl)
# Load the data
df <- read_excel("data/titanic.xlsx")
View(df)
colnames(df)
# scatter plot
plot_ly(df, x = ~age, y = ~fare, type = "scatter")
# scatter plot
plot_ly(df, x = ~age, y = ~fare, color = ~sex, type = "scatter")
# scatter plot
plot_ly(df, x = ~age, y = ~fare, color = ~sex, type = "scatter", mode = "markers")
# line plot
plot_ly(df, x = ~age, y = ~fare, color = ~sex, type = "scatter", mode = "lines")
# line plot
plot_ly(df, x = ~pclass, y = ~fare, color = ~sex, type = "scatter", mode = "lines")
# line plot
plot_ly(df, x = ~pclass, y = ~embarked, color = ~sex, type = "scatter", mode = "lines")
# bar plot
plot_ly(df, x = ~pclass, y = ~fare, color = ~sex, type = "bar")
#histogram
plot_ly(df, x = ~age, type = "histogram")
#boxplot
plot_ly(df, x = ~pclass, y = ~fare, color = ~sex, type = "box")
#boxplot
plot_ly(df, y = ~fare, type = "box")
#boxplot
plot_ly(df, x = ~pclass, y = ~fare, type = "box")
#boxplot
plot_ly(df, x = ~pclass, y = ~fare, type = "box", color=~who)
#boxplot
plot_ly(df, x = ~pclass, y = ~fare,color=~who, type = "box")
# scatter plot
plot_ly(df, x = ~age, y = ~fare, color = ~sex, type = "scatter", mode = "markers")
# scatter plot
plot_ly(df, x = ~age, y = ~fare, color = ~sex, type = "scatter", mode = "markers",
size = ~fare
)
# heatmap
plot_ly(df, x = ~pclass, y = ~embarked, z = ~fare, type = "heatmap")
# heatmap
plot_ly(df, x = ~class, y = ~embark_town, z = ~fare, type = "heatmap")
# heatmap
plot_ly(df, x = ~class, y = ~embark_town, z = ~age, type = "heatmap")
# heatmap
plot_ly(df, x = ~class, y = ~embark_town, z = ~sex, type = "heatmap")
# heatmap
plot_ly(df, x = ~class, y = ~embark_town, z = ~pclass, type = "heatmap")
# heatmap
plot_ly(df, x = ~class, y = ~embark_town, z = ~age, type = "heatmap")
# pie chart
plot_ly(df, labels = ~sex, type = "pie")
# pie chart
plot_ly(df, labels = ~class, type = "pie")
# pie chart
plot_ly(df, labels = ~class, type = "pie", values = ~fare)
#bubble chart
plot_ly(df, x = ~age, y = ~fare, color = ~sex, size = ~fare, type = "bubble")
#bubble chart
plot_ly(df, x = ~age, y = ~fare, color = ~sex, type = "bubble")
#bubble chart
plot_ly(df, x = ~age, y = ~fare, color = ~sex, type = "scatter", mode = "markers",
size = ~fare
)
#bubble chart
plot_ly(df, x = ~age, y = ~fare, color = ~sex, type = "scatter", mode = "markers",
size = ~fare * 0.1
)
#bubble chart
plot_ly(df, x = ~age, y = ~fare, color = ~sex, type = "scatter", mode = "markers",
size = ~fare * 0.5
)
#bubble chart
plot_ly(df, x = ~age, y = ~fare, color = ~sex, type = "scatter", mode = "markers",
size = ~fare * 2
)
# violin plot
plot_ly(df, x = ~pclass, y = ~fare, color = ~sex, type = "violin")
# violin plot
plot_ly(df, x = ~pclass, y = ~age, color = ~sex, type = "violin")
# violin plot
plot_ly(df, x = ~pclass, y = ~age, ctype = "violin")
# violin plot
plot_ly(df, x = ~pclass, y = ~age, type = "violin")
# 3D scatter plot
plot_ly(df, x = ~age, y = ~fare, z = ~pclass, color = ~sex, type = "scatter3d", mode = "markers")
